// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.cloud.spanner.pgadapter.statements.local;

import com.google.cloud.spanner.Statement;
import com.google.cloud.spanner.connection.StatementResult;
import com.google.cloud.spanner.pgadapter.statements.BackendConnection;

/**
 * Interface for statements that are handled locally in PGAdapter instead of being sent to
 * Connection API.
 */
public interface LocalStatement {
  /**
   * Returns the static SQL string associated with this local statement. A statement should include
   * a SQL statement for each variant that can reasonably be expected to be generated by a
   * framework, but does not need to include a variant for each theoretically possible variant. The
   * given SQL strings will be used as the keys in a {@link java.util.Map} for quick lookup. This
   * means that it will not match all possible variants of the statement, which is OK, as this is
   * only intended to cover auto-generated query strings from frameworks/tools.
   */
  String[] getSql();

  /** Returns true if the statement has a static replacement SQL string. */
  default boolean hasReplacementStatement() {
    return false;
  }

  /**
   * Returns the static replacement statement for this local statement, or null if {@link
   * #hasReplacementStatement()} returns false.
   */
  default Statement getReplacementStatement(Statement statement) {
    return null;
  }

  /** Executes the local statement and returns the result. */
  StatementResult execute(BackendConnection backendConnection);
}
