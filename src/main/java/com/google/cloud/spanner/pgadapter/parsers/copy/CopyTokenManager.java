/* CopyTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CopyTokenManager.java */
package com.google.cloud.spanner.pgadapter.parsers.copy;


/** Token Manager. */
@SuppressWarnings("unused")
public class CopyTokenManager implements CopyConstants {

  /** Debug output. */
  public java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public void setDebugStream(java.io.PrintStream ds) {
    debugStream = ds;
  }

  private int jjStopAtPos(int pos, int kind) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    return pos + 1;
  }

  private int jjMoveStringLiteralDfa0_0() {
    switch (curChar) {
      case 9:
        jjmatchedKind = 2;
        return jjMoveNfa_0(0, 0);
      case 10:
        jjmatchedKind = 3;
        return jjMoveNfa_0(0, 0);
      case 13:
        jjmatchedKind = 4;
        return jjMoveNfa_0(0, 0);
      case 32:
        jjmatchedKind = 1;
        return jjMoveNfa_0(0, 0);
      case 40:
        jjmatchedKind = 39;
        return jjMoveNfa_0(0, 0);
      case 41:
        jjmatchedKind = 40;
        return jjMoveNfa_0(0, 0);
      case 44:
        jjmatchedKind = 41;
        return jjMoveNfa_0(0, 0);
      case 46:
        jjmatchedKind = 38;
        return jjMoveNfa_0(0, 0);
      case 59:
        jjmatchedKind = 37;
        return jjMoveNfa_0(0, 0);
      case 66:
        return jjMoveStringLiteralDfa1_0(0x2000L);
      case 67:
        return jjMoveStringLiteralDfa1_0(0x4800L);
      case 68:
        return jjMoveStringLiteralDfa1_0(0x40000L);
      case 69:
        return jjMoveStringLiteralDfa1_0(0x4400000L);
      case 70:
        return jjMoveStringLiteralDfa1_0(0x13830400L);
      case 72:
        return jjMoveStringLiteralDfa1_0(0x100000L);
      case 78:
        return jjMoveStringLiteralDfa1_0(0x80000L);
      case 81:
        return jjMoveStringLiteralDfa1_0(0x200000L);
      case 83:
        return jjMoveStringLiteralDfa1_0(0x180L);
      case 84:
        return jjMoveStringLiteralDfa1_0(0x8008200L);
      case 87:
        return jjMoveStringLiteralDfa1_0(0x1000L);
      case 98:
        return jjMoveStringLiteralDfa1_0(0x2000L);
      case 99:
        return jjMoveStringLiteralDfa1_0(0x4800L);
      case 100:
        return jjMoveStringLiteralDfa1_0(0x40000L);
      case 101:
        return jjMoveStringLiteralDfa1_0(0x4400000L);
      case 102:
        return jjMoveStringLiteralDfa1_0(0x13830400L);
      case 104:
        return jjMoveStringLiteralDfa1_0(0x100000L);
      case 110:
        return jjMoveStringLiteralDfa1_0(0x80000L);
      case 113:
        return jjMoveStringLiteralDfa1_0(0x200000L);
      case 115:
        return jjMoveStringLiteralDfa1_0(0x180L);
      case 116:
        return jjMoveStringLiteralDfa1_0(0x8008200L);
      case 119:
        return jjMoveStringLiteralDfa1_0(0x1000L);
      default:
        return jjMoveNfa_0(0, 0);
    }
  }

  private int jjMoveStringLiteralDfa1_0(long active0) {
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 0);
    }
    switch (curChar) {
      case 65:
        return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 69:
        return jjMoveStringLiteralDfa2_0(active0, 0x148000L);
      case 73:
        return jjMoveStringLiteralDfa2_0(active0, 0x3000L);
      case 78:
        return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 79:
        if ((active0 & 0x200L) != 0L) {
          jjmatchedKind = 9;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x3810800L);
      case 82:
        return jjMoveStringLiteralDfa2_0(active0, 0x8020400L);
      case 83:
        return jjMoveStringLiteralDfa2_0(active0, 0x404000L);
      case 84:
        return jjMoveStringLiteralDfa2_0(active0, 0x180L);
      case 85:
        return jjMoveStringLiteralDfa2_0(active0, 0x280000L);
      case 97:
        return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 101:
        return jjMoveStringLiteralDfa2_0(active0, 0x148000L);
      case 105:
        return jjMoveStringLiteralDfa2_0(active0, 0x3000L);
      case 110:
        return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 111:
        if ((active0 & 0x200L) != 0L) {
          jjmatchedKind = 9;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x3810800L);
      case 114:
        return jjMoveStringLiteralDfa2_0(active0, 0x8020400L);
      case 115:
        return jjMoveStringLiteralDfa2_0(active0, 0x404000L);
      case 116:
        return jjMoveStringLiteralDfa2_0(active0, 0x180L);
      case 117:
        return jjMoveStringLiteralDfa2_0(active0, 0x280000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 1);
  }

  private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 1);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 1);
    }
    switch (curChar) {
      case 65:
        return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 67:
        return jjMoveStringLiteralDfa3_0(active0, 0x4400000L);
      case 68:
        return jjMoveStringLiteralDfa3_0(active0, 0x180L);
      case 69:
        return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 76:
        return jjMoveStringLiteralDfa3_0(active0, 0x100c0000L);
      case 78:
        return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 79:
        return jjMoveStringLiteralDfa3_0(active0, 0x200400L);
      case 80:
        return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 82:
        return jjMoveStringLiteralDfa3_0(active0, 0x3810000L);
      case 84:
        return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 85:
        return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 86:
        if ((active0 & 0x4000L) != 0L) {
          jjmatchedKind = 14;
          jjmatchedPos = 2;
        }
        break;
      case 88:
        return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 97:
        return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 99:
        return jjMoveStringLiteralDfa3_0(active0, 0x4400000L);
      case 100:
        return jjMoveStringLiteralDfa3_0(active0, 0x180L);
      case 101:
        return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 108:
        return jjMoveStringLiteralDfa3_0(active0, 0x100c0000L);
      case 110:
        return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 111:
        return jjMoveStringLiteralDfa3_0(active0, 0x200400L);
      case 112:
        return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 114:
        return jjMoveStringLiteralDfa3_0(active0, 0x3810000L);
      case 116:
        return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 117:
        return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 118:
        if ((active0 & 0x4000L) != 0L) {
          jjmatchedKind = 14;
          jjmatchedPos = 2;
        }
        break;
      case 120:
        return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 2);
  }

  private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 2);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 2);
    }
    switch (curChar) {
      case 65:
        return jjMoveStringLiteralDfa4_0(active0, 0x402000L);
      case 67:
        return jjMoveStringLiteralDfa4_0(active0, 0x3800000L);
      case 68:
        return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 69:
        if ((active0 & 0x8000000L) != 0L) {
          jjmatchedKind = 27;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 72:
        if ((active0 & 0x1000L) != 0L) {
          jjmatchedKind = 12;
          jjmatchedPos = 3;
        }
        break;
      case 73:
        return jjMoveStringLiteralDfa4_0(active0, 0x40080L);
      case 76:
        if ((active0 & 0x80000L) != 0L) {
          jjmatchedKind = 19;
          jjmatchedPos = 3;
        }
        break;
      case 77:
        if ((active0 & 0x400L) != 0L) {
          jjmatchedKind = 10;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 79:
        return jjMoveStringLiteralDfa4_0(active0, 0x4000100L);
      case 83:
        return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 84:
        if ((active0 & 0x8000L) != 0L) {
          jjmatchedKind = 15;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 89:
        if ((active0 & 0x800L) != 0L) {
          jjmatchedKind = 11;
          jjmatchedPos = 3;
        }
        break;
      case 97:
        return jjMoveStringLiteralDfa4_0(active0, 0x402000L);
      case 99:
        return jjMoveStringLiteralDfa4_0(active0, 0x3800000L);
      case 100:
        return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 101:
        if ((active0 & 0x8000000L) != 0L) {
          jjmatchedKind = 27;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 104:
        if ((active0 & 0x1000L) != 0L) {
          jjmatchedKind = 12;
          jjmatchedPos = 3;
        }
        break;
      case 105:
        return jjMoveStringLiteralDfa4_0(active0, 0x40080L);
      case 108:
        if ((active0 & 0x80000L) != 0L) {
          jjmatchedKind = 19;
          jjmatchedPos = 3;
        }
        break;
      case 109:
        if ((active0 & 0x400L) != 0L) {
          jjmatchedKind = 10;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 111:
        return jjMoveStringLiteralDfa4_0(active0, 0x4000100L);
      case 115:
        return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 116:
        if ((active0 & 0x8000L) != 0L) {
          jjmatchedKind = 15;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 121:
        if ((active0 & 0x800L) != 0L) {
          jjmatchedKind = 11;
          jjmatchedPos = 3;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(0, 3);
  }

  private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 3);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 3);
    }
    switch (curChar) {
      case 65:
        return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 68:
        return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 69:
        if ((active0 & 0x200000L) != 0L) {
          jjmatchedKind = 21;
          jjmatchedPos = 4;
        } else if ((active0 & 0x10000000L) != 0L) {
          jjmatchedKind = 28;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x3900000L);
      case 77:
        return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 78:
        if ((active0 & 0x80L) != 0L) {
          jjmatchedKind = 7;
          jjmatchedPos = 4;
        }
        break;
      case 80:
        return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 82:
        return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 85:
        return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 90:
        return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 97:
        return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 100:
        return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 101:
        if ((active0 & 0x200000L) != 0L) {
          jjmatchedKind = 21;
          jjmatchedPos = 4;
        } else if ((active0 & 0x10000000L) != 0L) {
          jjmatchedKind = 28;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x3900000L);
      case 109:
        return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 110:
        if ((active0 & 0x80L) != 0L) {
          jjmatchedKind = 7;
          jjmatchedPos = 4;
        }
        break;
      case 112:
        return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 114:
        return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 117:
        return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 122:
        return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 4);
  }

  private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 4);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 4);
    }
    switch (curChar) {
      case 69:
        if ((active0 & 0x20000L) != 0L) {
          jjmatchedKind = 17;
          jjmatchedPos = 5;
        } else if ((active0 & 0x400000L) != 0L) {
          jjmatchedKind = 22;
          jjmatchedPos = 5;
        }
        break;
      case 73:
        return jjMoveStringLiteralDfa6_0(active0, 0x4040000L);
      case 82:
        if ((active0 & 0x100000L) != 0L) {
          jjmatchedKind = 20;
          jjmatchedPos = 5;
        }
        break;
      case 84:
        if ((active0 & 0x100L) != 0L) {
          jjmatchedKind = 8;
          jjmatchedPos = 5;
        } else if ((active0 & 0x10000L) != 0L) {
          jjmatchedKind = 16;
          jjmatchedPos = 5;
        }
        break;
      case 89:
        if ((active0 & 0x2000L) != 0L) {
          jjmatchedKind = 13;
          jjmatchedPos = 5;
        }
        break;
      case 95:
        return jjMoveStringLiteralDfa6_0(active0, 0x3800000L);
      case 101:
        if ((active0 & 0x20000L) != 0L) {
          jjmatchedKind = 17;
          jjmatchedPos = 5;
        } else if ((active0 & 0x400000L) != 0L) {
          jjmatchedKind = 22;
          jjmatchedPos = 5;
        }
        break;
      case 105:
        return jjMoveStringLiteralDfa6_0(active0, 0x4040000L);
      case 114:
        if ((active0 & 0x100000L) != 0L) {
          jjmatchedKind = 20;
          jjmatchedPos = 5;
        }
        break;
      case 116:
        if ((active0 & 0x100L) != 0L) {
          jjmatchedKind = 8;
          jjmatchedPos = 5;
        } else if ((active0 & 0x10000L) != 0L) {
          jjmatchedKind = 16;
          jjmatchedPos = 5;
        }
        break;
      case 121:
        if ((active0 & 0x2000L) != 0L) {
          jjmatchedKind = 13;
          jjmatchedPos = 5;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(0, 5);
  }

  private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 5);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 5);
    }
    switch (curChar) {
      case 78:
        return jjMoveStringLiteralDfa7_0(active0, 0x7000000L);
      case 81:
        return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 84:
        return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 110:
        return jjMoveStringLiteralDfa7_0(active0, 0x7000000L);
      case 113:
        return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 116:
        return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 6);
  }

  private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 6);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 6);
    }
    switch (curChar) {
      case 69:
        return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 71:
        if ((active0 & 0x4000000L) != 0L) {
          jjmatchedKind = 26;
          jjmatchedPos = 7;
        }
        break;
      case 79:
        return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 85:
        return jjMoveStringLiteralDfa8_0(active0, 0x2800000L);
      case 101:
        return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 103:
        if ((active0 & 0x4000000L) != 0L) {
          jjmatchedKind = 26;
          jjmatchedPos = 7;
        }
        break;
      case 111:
        return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 117:
        return jjMoveStringLiteralDfa8_0(active0, 0x2800000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 7);
  }

  private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 7);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 7);
    }
    switch (curChar) {
      case 76:
        return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 79:
        return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 82:
        if ((active0 & 0x40000L) != 0L) {
          jjmatchedKind = 18;
          jjmatchedPos = 8;
        }
        break;
      case 84:
        return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 108:
        return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 111:
        return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 114:
        if ((active0 & 0x40000L) != 0L) {
          jjmatchedKind = 18;
          jjmatchedPos = 8;
        }
        break;
      case 116:
        return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 8);
  }

  private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 8);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 8);
    }
    switch (curChar) {
      case 76:
        if ((active0 & 0x2000000L) != 0L) {
          jjmatchedKind = 25;
          jjmatchedPos = 9;
        }
        break;
      case 84:
        return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 95:
        return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 108:
        if ((active0 & 0x2000000L) != 0L) {
          jjmatchedKind = 25;
          jjmatchedPos = 9;
        }
        break;
      case 116:
        return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 9);
  }

  private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 9);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 9);
    }
    switch (curChar) {
      case 69:
        if ((active0 & 0x800000L) != 0L) {
          jjmatchedKind = 23;
          jjmatchedPos = 10;
        }
        break;
      case 78:
        return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 101:
        if ((active0 & 0x800000L) != 0L) {
          jjmatchedKind = 23;
          jjmatchedPos = 10;
        }
        break;
      case 110:
        return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 10);
  }

  private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 10);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 10);
    }
    switch (curChar) {
      case 85:
        return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      case 117:
        return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 11);
  }

  private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 11);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 11);
    }
    switch (curChar) {
      case 76:
        return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      case 108:
        return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      default:
        break;
    }
    return jjMoveNfa_0(0, 12);
  }

  private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) return jjMoveNfa_0(0, 12);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(0, 12);
    }
    switch (curChar) {
      case 76:
        if ((active0 & 0x1000000L) != 0L) {
          jjmatchedKind = 24;
          jjmatchedPos = 13;
        }
        break;
      case 108:
        if ((active0 & 0x1000000L) != 0L) {
          jjmatchedKind = 24;
          jjmatchedPos = 13;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(0, 13);
  }

  static final long[] jjbitVec0 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};

  private int jjMoveNfa_0(int startState, int curPos) {
    int strKind = jjmatchedKind;
    int strPos = jjmatchedPos;
    int seenUpto;
    input_stream.backup(seenUpto = curPos + 1);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      throw new Error("Internal Error");
    }
    curPos = 0;
    int startsAt = 0;
    jjnewStateCnt = 37;
    int i = 1;
    jjstateSet[0] = startState;
    int kind = 0x7fffffff;
    for (; ; ) {
      if (++jjround == 0x7fffffff) ReInitRounds();
      if (curChar < 64) {
        long l = 1L << curChar;
        do {
          switch (jjstateSet[--i]) {
            case 0:
              if (curChar == 39) {
                jjAddStates(0, 3);
              } else if (curChar == 34) {
                jjAddStates(4, 6);
              } else if (curChar == 47) {
                jjAddStates(7, 8);
              }
              break;
            case 1:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 30) kind = 30;
              jjstateSet[jjnewStateCnt++] = 1;
              break;
            case 2:
              if (curChar == 47) {
                jjAddStates(7, 8);
              }
              break;
            case 3:
              if (curChar == 47) {
                jjCheckNAddStates(9, 11);
              }
              break;
            case 4:
              if ((0xffffffffffffdbffL & l) != 0L) {
                jjCheckNAddStates(9, 11);
              }
              break;
            case 5:
              if ((0x2400L & l) != 0L && kind > 5) kind = 5;
              break;
            case 6:
              if (curChar == 10 && kind > 5) kind = 5;
              break;
            case 7:
              if (curChar == 13) jjstateSet[jjnewStateCnt++] = 6;
              break;
            case 8:
              if (curChar == 42) {
                jjCheckNAddTwoStates(9, 10);
              }
              break;
            case 9:
              if ((0xfffffbffffffffffL & l) != 0L) {
                jjCheckNAddTwoStates(9, 10);
              }
              break;
            case 10:
              if (curChar == 42) {
                jjAddStates(12, 13);
              }
              break;
            case 11:
              if ((0xffff7fffffffffffL & l) != 0L) {
                jjCheckNAddTwoStates(12, 10);
              }
              break;
            case 12:
              if ((0xfffffbffffffffffL & l) != 0L) {
                jjCheckNAddTwoStates(12, 10);
              }
              break;
            case 13:
              if (curChar == 47 && kind > 6) kind = 6;
              break;
            case 14:
              if (curChar == 34) {
                jjAddStates(4, 6);
              }
              break;
            case 15:
              if (curChar == 39) jjstateSet[jjnewStateCnt++] = 16;
              break;
            case 17:
              if ((0x3ff000000000000L & l) != 0L) {
                jjAddStates(14, 15);
              }
              break;
            case 18:
              if (curChar == 39) {
                jjCheckNAdd(19);
              }
              break;
            case 19:
              if (curChar == 34 && kind > 29) kind = 29;
              break;
            case 21:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(21, 19);
              }
              break;
            case 22:
              if ((0xf400fcfe00000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 23;
              break;
            case 23:
              if (curChar == 34 && kind > 31) kind = 31;
              break;
            case 24:
              if (curChar == 39) {
                jjAddStates(0, 3);
              }
              break;
            case 25:
              if (curChar == 39) jjstateSet[jjnewStateCnt++] = 26;
              break;
            case 27:
              if ((0x3ff000000000000L & l) != 0L) {
                jjAddStates(16, 17);
              }
              break;
            case 28:
              if (curChar == 39) {
                jjCheckNAdd(29);
              }
              break;
            case 29:
              if (curChar == 39 && kind > 29) kind = 29;
              break;
            case 31:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(31, 29);
              }
              break;
            case 33:
              if ((0x3ff000000000000L & l) != 0L) {
                jjAddStates(18, 19);
              }
              break;
            case 34:
              if (curChar == 39 && kind > 30) kind = 30;
              break;
            case 35:
              if ((0xf400fcfe00000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 36;
              break;
            case 36:
              if (curChar == 39 && kind > 31) kind = 31;
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 0:
            case 1:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 30) kind = 30;
              {
                jjCheckNAdd(1);
              }
              break;
            case 4:
              {
                jjAddStates(9, 11);
              }
              break;
            case 9:
              {
                jjCheckNAddTwoStates(9, 10);
              }
              break;
            case 11:
            case 12:
              {
                jjCheckNAddTwoStates(12, 10);
              }
              break;
            case 16:
            case 17:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(17, 18);
              }
              break;
            case 20:
            case 21:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(21, 19);
              }
              break;
            case 22:
              if ((0x1f8000001L & l) != 0L) jjstateSet[jjnewStateCnt++] = 23;
              break;
            case 26:
            case 27:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(27, 28);
              }
              break;
            case 30:
            case 31:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(31, 29);
              }
              break;
            case 32:
            case 33:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(33, 34);
              }
              break;
            case 35:
              if ((0x1f8000001L & l) != 0L) jjstateSet[jjnewStateCnt++] = 36;
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else {
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 4:
              if ((jjbitVec0[i2] & l2) != 0L) {
                jjAddStates(9, 11);
              }
              break;
            case 9:
              if ((jjbitVec0[i2] & l2) != 0L) {
                jjCheckNAddTwoStates(9, 10);
              }
              break;
            case 11:
            case 12:
              if ((jjbitVec0[i2] & l2) != 0L) {
                jjCheckNAddTwoStates(12, 10);
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt))) break;
      try {
        curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
        break;
      }
    }
    if (jjmatchedPos > strPos) return curPos;

    int toRet = Math.max(curPos, seenUpto);

    if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
        try {
          curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
          throw new Error("Internal Error : Please send a bug report.");
        }

    if (jjmatchedPos < strPos) {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
    } else if (jjmatchedPos == strPos && jjmatchedKind > strKind) jjmatchedKind = strKind;

    return toRet;
  }

  /** Token literal values. */
  public static final String[] jjstrLiteralImages = {
    "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, "\73", "\56", "\50", "\51", "\54",
  };

  protected Token jjFillToken() {
    final Token t;
    final String curTokenImage;
    final int beginLine;
    final int endLine;
    final int beginColumn;
    final int endColumn;
    String im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im == null) ? input_stream.GetImage() : im;
    beginLine = input_stream.getBeginLine();
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
    t = Token.newToken(jjmatchedKind, curTokenImage);

    t.beginLine = beginLine;
    t.endLine = endLine;
    t.beginColumn = beginColumn;
    t.endColumn = endColumn;

    return t;
  }

  static final int[] jjnextStates = {
    25, 30, 32, 35, 15, 20, 22, 3, 8, 4, 5, 7, 11, 13, 17, 18, 27, 28, 33, 34,
  };

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  /** Get the next Token. */
  public Token getNextToken() {
    Token matchedToken;
    int curPos = 0;

    EOFLoop:
    for (; ; ) {
      try {
        curChar = input_stream.BeginToken();
      } catch (Exception e) {
        jjmatchedKind = 0;
        jjmatchedPos = -1;
        matchedToken = jjFillToken();
        return matchedToken;
      }

      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      curPos = jjMoveStringLiteralDfa0_0();
      if (jjmatchedKind != 0x7fffffff) {
        if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
          matchedToken = jjFillToken();
          return matchedToken;
        } else {
          continue EOFLoop;
        }
      }
      int error_line = input_stream.getEndLine();
      int error_column = input_stream.getEndColumn();
      String error_after = null;
      boolean EOFSeen = false;
      try {
        input_stream.readChar();
        input_stream.backup(1);
      } catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
          error_line++;
          error_column = 0;
        } else error_column++;
      }
      if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
      }
      throw new TokenMgrError(
          EOFSeen,
          curLexState,
          error_line,
          error_column,
          error_after,
          curChar,
          TokenMgrError.LEXICAL_ERROR);
    }
  }

  void SkipLexicalActions(Token matchedToken) {
    switch (jjmatchedKind) {
      default:
        break;
    }
  }

  void MoreLexicalActions() {
    jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
    switch (jjmatchedKind) {
      default:
        break;
    }
  }

  void TokenLexicalActions(Token matchedToken) {
    switch (jjmatchedKind) {
      default:
        break;
    }
  }

  private void jjCheckNAdd(int state) {
    if (jjrounds[state] != jjround) {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  private void jjAddStates(int start, int end) {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }

  private void jjCheckNAddTwoStates(int state1, int state2) {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  private void jjCheckNAddStates(int start, int end) {
    do {
      jjCheckNAdd(jjnextStates[start]);
    } while (start++ != end);
  }

  /** Constructor. */
  public CopyTokenManager(SimpleCharStream stream) {

    if (SimpleCharStream.staticFlag)
      throw new Error(
          "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CopyTokenManager(SimpleCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream) {

    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = 37; i-- > 0; ) jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState) {

    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState) {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError(
          "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
          TokenMgrError.INVALID_LEXICAL_STATE);
    else curLexState = lexState;
  }

  /** Lexer state names. */
  public static final String[] lexStateNames = {
    "DEFAULT",
  };

  /** Lex State array. */
  public static final int[] jjnewLexState = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  };

  static final long[] jjtoToken = {
    0x3e0ffffff81L,
  };
  static final long[] jjtoSkip = {
    0x7eL,
  };
  static final long[] jjtoSpecial = {
    0x0L,
  };
  static final long[] jjtoMore = {
    0x0L,
  };
  protected SimpleCharStream input_stream;

  private final int[] jjrounds = new int[37];
  private final int[] jjstateSet = new int[2 * 37];
  private final StringBuilder jjimage = new StringBuilder();
  private StringBuilder image = jjimage;
  private int jjimageLen;
  private int lengthOfMatch;
  protected int curChar;
}
