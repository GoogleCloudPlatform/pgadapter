/* CopyTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CopyTokenManager.java */
package com.google.cloud.spanner.pgadapter.parsers.copy;

/** Token Manager. */
public class CopyTokenManager implements CopyConstants {

  /** Debug output. */
  public java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public void setDebugStream(java.io.PrintStream ds) {
    debugStream = ds;
  }

  private final int jjStopStringLiteralDfa_0(int pos, long active0) {
    switch (pos) {
      default:
        return -1;
    }
  }

  private final int jjStartNfa_0(int pos, long active0) {
    return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
  }

  private int jjStopAtPos(int pos, int kind) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    return pos + 1;
  }

  private int jjMoveStringLiteralDfa0_0() {
    switch (curChar) {
      case 34:
        return jjStartNfaWithStates_0(0, 16, 147);
      case 39:
        return jjStartNfaWithStates_0(0, 15, 157);
      case 40:
        return jjStopAtPos(0, 42);
      case 41:
        return jjStopAtPos(0, 43);
      case 44:
        return jjStopAtPos(0, 13);
      case 46:
        return jjStopAtPos(0, 14);
      case 59:
        return jjStopAtPos(0, 41);
      default:
        return jjMoveNfa_0(0, 0);
    }
  }

  private int jjStartNfaWithStates_0(int pos, int kind, int state) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return pos + 1;
    }
    return jjMoveNfa_0(state, pos + 1);
  }

  static final long[] jjbitVec0 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};

  private int jjMoveNfa_0(int startState, int curPos) {
    int startsAt = 0;
    jjnewStateCnt = 169;
    int i = 1;
    jjstateSet[0] = startState;
    int kind = 0x7fffffff;
    for (; ; ) {
      if (++jjround == 0x7fffffff) ReInitRounds();
      if (curChar < 64) {
        long l = 1L << curChar;
        do {
          switch (jjstateSet[--i]) {
            case 157:
              if ((0xf400fcfe00000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 168;
              if (curChar == 39) jjstateSet[jjnewStateCnt++] = 158;
              break;
            case 0:
              if (curChar == 39) {
                jjAddStates(0, 3);
              } else if (curChar == 34) {
                jjAddStates(4, 6);
              } else if (curChar == 47) {
                jjAddStates(7, 8);
              }
              break;
            case 147:
              if ((0xf400fcfe00000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 155;
              if (curChar == 39) jjstateSet[jjnewStateCnt++] = 148;
              break;
            case 53:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 34) kind = 34;
              jjstateSet[jjnewStateCnt++] = 53;
              break;
            case 54:
              if (curChar == 47) {
                jjAddStates(7, 8);
              }
              break;
            case 55:
              if (curChar == 47) {
                jjCheckNAddStates(9, 11);
              }
              break;
            case 56:
              if ((0xffffffffffffdbffL & l) != 0L) {
                jjCheckNAddStates(9, 11);
              }
              break;
            case 57:
              if ((0x2400L & l) != 0L && kind > 5) kind = 5;
              break;
            case 58:
              if (curChar == 10 && kind > 5) kind = 5;
              break;
            case 59:
              if (curChar == 13) jjstateSet[jjnewStateCnt++] = 58;
              break;
            case 60:
              if (curChar == 42) {
                jjCheckNAddTwoStates(61, 62);
              }
              break;
            case 61:
              if ((0xfffffbffffffffffL & l) != 0L) {
                jjCheckNAddTwoStates(61, 62);
              }
              break;
            case 62:
              if (curChar == 42) {
                jjAddStates(12, 13);
              }
              break;
            case 63:
              if ((0xffff7fffffffffffL & l) != 0L) {
                jjCheckNAddTwoStates(64, 62);
              }
              break;
            case 64:
              if ((0xfffffbffffffffffL & l) != 0L) {
                jjCheckNAddTwoStates(64, 62);
              }
              break;
            case 65:
              if (curChar == 47 && kind > 6) kind = 6;
              break;
            case 146:
              if (curChar == 34) {
                jjAddStates(4, 6);
              }
              break;
            case 149:
              if ((0x3ff000000000000L & l) != 0L) {
                jjAddStates(14, 15);
              }
              break;
            case 150:
              if (curChar == 39) {
                jjCheckNAdd(151);
              }
              break;
            case 151:
              if (curChar == 34 && kind > 33) kind = 33;
              break;
            case 153:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(153, 151);
              }
              break;
            case 154:
              if ((0xf400fcfe00000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 155;
              break;
            case 155:
              if (curChar == 34 && kind > 35) kind = 35;
              break;
            case 156:
              if (curChar == 39) {
                jjAddStates(0, 3);
              }
              break;
            case 159:
              if ((0x3ff000000000000L & l) != 0L) {
                jjAddStates(16, 17);
              }
              break;
            case 160:
              if (curChar == 39) {
                jjCheckNAdd(161);
              }
              break;
            case 161:
              if (curChar == 39 && kind > 33) kind = 33;
              break;
            case 163:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(163, 161);
              }
              break;
            case 165:
              if ((0x3ff000000000000L & l) != 0L) {
                jjAddStates(18, 19);
              }
              break;
            case 166:
              if (curChar == 39 && kind > 34) kind = 34;
              break;
            case 167:
              if ((0xf400fcfe00000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 168;
              break;
            case 168:
              if (curChar == 39 && kind > 35) kind = 35;
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 157:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(165, 166);
              }
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(163, 161);
              }
              if ((0x1f8000001L & l) != 0L) jjstateSet[jjnewStateCnt++] = 168;
              break;
            case 0:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 34) kind = 34;
                {
                  jjCheckNAdd(53);
                }
              }
              if ((0x2000000020L & l) != 0L) {
                jjAddStates(20, 21);
              } else if ((0x800000008L & l) != 0L) {
                jjAddStates(22, 23);
              } else if ((0x4000000040L & l) != 0L) {
                jjAddStates(24, 29);
              } else if ((0x10000000100000L & l) != 0L) {
                jjAddStates(30, 31);
              } else if ((0x8000000080000L & l) != 0L) {
                jjAddStates(32, 33);
              } else if ((0x2000000020000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 30;
              else if ((0x10000000100L & l) != 0L) jjstateSet[jjnewStateCnt++] = 24;
              else if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 20;
              else if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 11;
              else if ((0x400000004L & l) != 0L) jjstateSet[jjnewStateCnt++] = 5;
              else if ((0x80000000800000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 1;
              if (curChar == 102) jjstateSet[jjnewStateCnt++] = 50;
              else if (curChar == 70) jjstateSet[jjnewStateCnt++] = 45;
              else if (curChar == 116) jjstateSet[jjnewStateCnt++] = 40;
              else if (curChar == 84) jjstateSet[jjnewStateCnt++] = 36;
              break;
            case 147:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(153, 151);
              }
              if ((0x1f8000001L & l) != 0L) jjstateSet[jjnewStateCnt++] = 155;
              break;
            case 1:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 2;
              break;
            case 2:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 3;
              break;
            case 3:
              if ((0x10000000100L & l) != 0L && kind > 12) kind = 12;
              break;
            case 4:
              if ((0x400000004L & l) != 0L) jjstateSet[jjnewStateCnt++] = 5;
              break;
            case 5:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 6;
              break;
            case 6:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 7;
              break;
            case 7:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 8;
              break;
            case 8:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 9;
              break;
            case 9:
              if ((0x200000002000000L & l) != 0L && kind > 17) kind = 17;
              break;
            case 10:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 11;
              break;
            case 11:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 12;
              break;
            case 12:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 13;
              break;
            case 13:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 14;
              break;
            case 14:
              if ((0x200000002000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 15;
              break;
            case 15:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 16;
              break;
            case 16:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 17;
              break;
            case 17:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 18;
              break;
            case 18:
              if ((0x4000000040000L & l) != 0L && kind > 22) kind = 22;
              break;
            case 19:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 20;
              break;
            case 20:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 21;
              break;
            case 21:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 22;
              break;
            case 22:
              if ((0x100000001000L & l) != 0L && kind > 23) kind = 23;
              break;
            case 23:
              if ((0x10000000100L & l) != 0L) jjstateSet[jjnewStateCnt++] = 24;
              break;
            case 24:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 25;
              break;
            case 25:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 26;
              break;
            case 26:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 27;
              break;
            case 27:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 28;
              break;
            case 28:
              if ((0x4000000040000L & l) != 0L && kind > 24) kind = 24;
              break;
            case 29:
              if ((0x2000000020000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 30;
              break;
            case 30:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 31;
              break;
            case 31:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 32;
              break;
            case 32:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 33;
              break;
            case 33:
              if ((0x2000000020L & l) != 0L && kind > 25) kind = 25;
              break;
            case 34:
              if (curChar == 69 && kind > 31) kind = 31;
              break;
            case 35:
              if (curChar == 85) jjstateSet[jjnewStateCnt++] = 34;
              break;
            case 36:
              if (curChar == 82) jjstateSet[jjnewStateCnt++] = 35;
              break;
            case 37:
              if (curChar == 84) jjstateSet[jjnewStateCnt++] = 36;
              break;
            case 38:
              if (curChar == 101 && kind > 31) kind = 31;
              break;
            case 39:
              if (curChar == 117) jjstateSet[jjnewStateCnt++] = 38;
              break;
            case 40:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 39;
              break;
            case 41:
              if (curChar == 116) jjstateSet[jjnewStateCnt++] = 40;
              break;
            case 42:
              if (curChar == 69 && kind > 32) kind = 32;
              break;
            case 43:
              if (curChar == 83) jjstateSet[jjnewStateCnt++] = 42;
              break;
            case 44:
              if (curChar == 76) jjstateSet[jjnewStateCnt++] = 43;
              break;
            case 45:
              if (curChar == 65) jjstateSet[jjnewStateCnt++] = 44;
              break;
            case 46:
              if (curChar == 70) jjstateSet[jjnewStateCnt++] = 45;
              break;
            case 47:
              if (curChar == 101 && kind > 32) kind = 32;
              break;
            case 48:
              if (curChar == 115) jjstateSet[jjnewStateCnt++] = 47;
              break;
            case 49:
              if (curChar == 108) jjstateSet[jjnewStateCnt++] = 48;
              break;
            case 50:
              if (curChar == 97) jjstateSet[jjnewStateCnt++] = 49;
              break;
            case 51:
              if (curChar == 102) jjstateSet[jjnewStateCnt++] = 50;
              break;
            case 52:
            case 53:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 34) kind = 34;
              {
                jjCheckNAdd(53);
              }
              break;
            case 56:
              {
                jjAddStates(9, 11);
              }
              break;
            case 61:
              {
                jjCheckNAddTwoStates(61, 62);
              }
              break;
            case 63:
            case 64:
              {
                jjCheckNAddTwoStates(64, 62);
              }
              break;
            case 66:
              if ((0x8000000080000L & l) != 0L) {
                jjAddStates(32, 33);
              }
              break;
            case 67:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 68;
              break;
            case 68:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 69;
              break;
            case 69:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 70;
              break;
            case 70:
              if ((0x400000004000L & l) != 0L && kind > 7) kind = 7;
              break;
            case 71:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 72;
              break;
            case 72:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 73;
              break;
            case 73:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 74;
              break;
            case 74:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 75;
              break;
            case 75:
              if ((0x10000000100000L & l) != 0L && kind > 8) kind = 8;
              break;
            case 76:
              if ((0x10000000100000L & l) != 0L) {
                jjAddStates(30, 31);
              }
              break;
            case 77:
              if ((0x800000008000L & l) != 0L && kind > 9) kind = 9;
              break;
            case 78:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 79;
              break;
            case 79:
              if ((0x100000001000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 80;
              break;
            case 80:
              if ((0x10000000100000L & l) != 0L && kind > 19) kind = 19;
              break;
            case 81:
              if ((0x4000000040L & l) != 0L) {
                jjAddStates(24, 29);
              }
              break;
            case 82:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 83;
              break;
            case 83:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 84;
              break;
            case 84:
              if ((0x200000002000L & l) != 0L && kind > 10) kind = 10;
              break;
            case 85:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 86;
              break;
            case 86:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 87;
              break;
            case 87:
              if ((0x200000002000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 88;
              break;
            case 88:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 89;
              break;
            case 89:
              if ((0x10000000100000L & l) != 0L && kind > 20) kind = 20;
              break;
            case 90:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 91;
              break;
            case 91:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 92;
              break;
            case 92:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 93;
              break;
            case 93:
              if ((0x400000004000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 94;
              break;
            case 94:
              if ((0x2000000020L & l) != 0L && kind > 21) kind = 21;
              break;
            case 95:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 96;
              break;
            case 96:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 97;
              break;
            case 97:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 98;
              break;
            case 98:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 99;
              break;
            case 99:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 100;
              break;
            case 100:
              if ((0x2000000020000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 101;
              break;
            case 101:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 102;
              break;
            case 102:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 103;
              break;
            case 103:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 104;
              break;
            case 104:
              if ((0x2000000020L & l) != 0L && kind > 27) kind = 27;
              break;
            case 105:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 106;
              break;
            case 106:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 107;
              break;
            case 107:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 108;
              break;
            case 108:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 109;
              break;
            case 109:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 110;
              break;
            case 110:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 111;
              break;
            case 111:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 112;
              break;
            case 112:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 113;
              break;
            case 113:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 114;
              break;
            case 114:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 115;
              break;
            case 115:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 116;
              break;
            case 116:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 117;
              break;
            case 117:
              if ((0x100000001000L & l) != 0L && kind > 28) kind = 28;
              break;
            case 118:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 119;
              break;
            case 119:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 120;
              break;
            case 120:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 121;
              break;
            case 121:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 122;
              break;
            case 122:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 123;
              break;
            case 123:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 124;
              break;
            case 124:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 125;
              break;
            case 125:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 126;
              break;
            case 126:
              if ((0x100000001000L & l) != 0L && kind > 29) kind = 29;
              break;
            case 127:
              if ((0x800000008L & l) != 0L) {
                jjAddStates(22, 23);
              }
              break;
            case 128:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 129;
              break;
            case 129:
              if ((0x1000000010000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 130;
              break;
            case 130:
              if ((0x200000002000000L & l) != 0L && kind > 11) kind = 11;
              break;
            case 131:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 132;
              break;
            case 132:
              if ((0x40000000400000L & l) != 0L && kind > 18) kind = 18;
              break;
            case 133:
              if ((0x2000000020L & l) != 0L) {
                jjAddStates(20, 21);
              }
              break;
            case 134:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 135;
              break;
            case 135:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 136;
              break;
            case 136:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 137;
              break;
            case 137:
              if ((0x1000000010000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 138;
              break;
            case 138:
              if ((0x2000000020L & l) != 0L && kind > 26) kind = 26;
              break;
            case 139:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 140;
              break;
            case 140:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 141;
              break;
            case 141:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 142;
              break;
            case 142:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 143;
              break;
            case 143:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 144;
              break;
            case 144:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 145;
              break;
            case 145:
              if ((0x8000000080L & l) != 0L && kind > 30) kind = 30;
              break;
            case 148:
            case 149:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(149, 150);
              }
              break;
            case 152:
            case 153:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(153, 151);
              }
              break;
            case 154:
              if ((0x1f8000001L & l) != 0L) jjstateSet[jjnewStateCnt++] = 155;
              break;
            case 158:
            case 159:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(159, 160);
              }
              break;
            case 162:
            case 163:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(163, 161);
              }
              break;
            case 164:
            case 165:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjCheckNAddTwoStates(165, 166);
              }
              break;
            case 167:
              if ((0x1f8000001L & l) != 0L) jjstateSet[jjnewStateCnt++] = 168;
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else {
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 56:
              if ((jjbitVec0[i2] & l2) != 0L) {
                jjAddStates(9, 11);
              }
              break;
            case 61:
              if ((jjbitVec0[i2] & l2) != 0L) {
                jjCheckNAddTwoStates(61, 62);
              }
              break;
            case 63:
            case 64:
              if ((jjbitVec0[i2] & l2) != 0L) {
                jjCheckNAddTwoStates(64, 62);
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 169 - (jjnewStateCnt = startsAt))) return curPos;
      try {
        curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
        return curPos;
      }
    }
  }

  /** Token literal values. */
  public static final String[] jjstrLiteralImages = {
    "", null, null, null, null, null, null, null, null, null, null, null, null, "\54", "\56", "\47",
    "\42", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, "\73", "\50", "\51",
  };

  protected Token jjFillToken() {
    final Token t;
    final String curTokenImage;
    final int beginLine;
    final int endLine;
    final int beginColumn;
    final int endColumn;
    String im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im == null) ? input_stream.GetImage() : im;
    beginLine = input_stream.getBeginLine();
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
    t = Token.newToken(jjmatchedKind, curTokenImage);

    t.beginLine = beginLine;
    t.endLine = endLine;
    t.beginColumn = beginColumn;
    t.endColumn = endColumn;

    return t;
  }

  static final int[] jjnextStates = {
    157, 162, 164, 167, 147, 152, 154, 55, 60, 56, 57, 59, 63, 65, 149, 150,
    159, 160, 165, 166, 134, 139, 128, 131, 82, 85, 90, 95, 105, 118, 77, 78,
    67, 71,
  };

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  /** Get the next Token. */
  public Token getNextToken() {
    Token matchedToken;
    int curPos = 0;

    EOFLoop:
    for (; ; ) {
      try {
        curChar = input_stream.BeginToken();
      } catch (Exception e) {
        jjmatchedKind = 0;
        jjmatchedPos = -1;
        matchedToken = jjFillToken();
        return matchedToken;
      }

      try {
        input_stream.backup(0);
        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
          curChar = input_stream.BeginToken();
      } catch (java.io.IOException e1) {
        continue EOFLoop;
      }
      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      curPos = jjMoveStringLiteralDfa0_0();
      if (jjmatchedKind != 0x7fffffff) {
        if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
          matchedToken = jjFillToken();
          return matchedToken;
        } else {
          continue EOFLoop;
        }
      }
      int error_line = input_stream.getEndLine();
      int error_column = input_stream.getEndColumn();
      String error_after = null;
      boolean EOFSeen = false;
      try {
        input_stream.readChar();
        input_stream.backup(1);
      } catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
          error_line++;
          error_column = 0;
        } else error_column++;
      }
      if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
      }
      throw new TokenMgrError(
          EOFSeen,
          curLexState,
          error_line,
          error_column,
          error_after,
          curChar,
          TokenMgrError.LEXICAL_ERROR);
    }
  }

  void SkipLexicalActions(Token matchedToken) {
    switch (jjmatchedKind) {
      default:
        break;
    }
  }

  void MoreLexicalActions() {
    jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
    switch (jjmatchedKind) {
      default:
        break;
    }
  }

  void TokenLexicalActions(Token matchedToken) {
    switch (jjmatchedKind) {
      default:
        break;
    }
  }

  private void jjCheckNAdd(int state) {
    if (jjrounds[state] != jjround) {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  private void jjAddStates(int start, int end) {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }

  private void jjCheckNAddTwoStates(int state1, int state2) {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  private void jjCheckNAddStates(int start, int end) {
    do {
      jjCheckNAdd(jjnextStates[start]);
    } while (start++ != end);
  }

  /** Constructor. */
  public CopyTokenManager(SimpleCharStream stream) {

    if (SimpleCharStream.staticFlag)
      throw new Error(
          "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CopyTokenManager(SimpleCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream) {

    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = 169; i-- > 0; ) jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState) {

    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState) {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError(
          "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
          TokenMgrError.INVALID_LEXICAL_STATE);
    else curLexState = lexState;
  }

  /** Lexer state names. */
  public static final String[] lexStateNames = {
    "DEFAULT",
  };

  /** Lex State array. */
  public static final int[] jjnewLexState = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  };

  static final long[] jjtoToken = {
    0xe0fffffff81L,
  };
  static final long[] jjtoSkip = {
    0x7eL,
  };
  static final long[] jjtoSpecial = {
    0x0L,
  };
  static final long[] jjtoMore = {
    0x0L,
  };
  protected SimpleCharStream input_stream;

  private final int[] jjrounds = new int[169];
  private final int[] jjstateSet = new int[2 * 169];
  private final StringBuilder jjimage = new StringBuilder();
  private StringBuilder image = jjimage;
  private int jjimageLen;
  private int lengthOfMatch;
  protected int curChar;
}
