/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. copy.jj */
/*@egen*/options {
             
               
                         
  STATIC=false;
}

PARSER_BEGIN(Copy)

package com.google.cloud.spanner.pgadapter.parsers.copy;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

public class Copy/*@bgen(jjtree)*/implements CopyTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCopyState jjtree = new JJTCopyState();

/*@egen*/

  public static void parse(String stmt, CopyTreeParser.CopyOptions options) throws Exception {
    java.io.InputStream stmtStream = new java.io.ByteArrayInputStream(stmt.getBytes());
    Copy tree = new Copy(stmtStream);
    try {
      ASTStart node = tree.Start();
      CopyVisitor v = new CopyTreeParser(options);
      node.jjtAccept(v, null);
    } catch (Exception e) {
      System.err.println(e.toString());
      throw e;
    }
  }

}

PARSER_END(Copy)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN [IGNORE_CASE] : /* KEYWORDS */
{
  <K_STDIN: "STDIN">
| <K_STDOUT: "STDOUT">
| <K_TO: "TO">
| <K_FROM: "FROM">
| <K_COPY: "COPY">
| <K_WITH: "WITH">
}

TOKEN [IGNORE_CASE] : /* COPY OPTIONS */
{
  <O_BINARY: "BINARY">
| <O_CSV: "CSV">
| <O_TEXT: "TEXT">
| <O_FORMAT: "FORMAT">
| <O_FREEZE: "FREEZE">
| <O_DELIMITER: "DELIMITER">
| <O_NULL: "NULL">
| <O_HEADER: "HEADER">
| <O_QUOTE: "QUOTE">
| <O_ESCAPE: "ESCAPE">
| <O_FORCE_QUOTE: "FORCE_QUOTE">
| <O_FORCE_NOT_NULL: "FORCE_NOT_NULL">
| <O_FORCE_NULL: "FORCE_NULL">
| <O_ENCODING: "ENCODING">
| <O_TRUE: "TRUE">
| <O_FALSE: "FALSE">
}

TOKEN : /* IDENTIFIERS */
{
  < QUOTED_CHAR: ("\"" <SINGLE_CHAR> "\"" | "\'" <SINGLE_CHAR> "\'") >
|
  < QUOTED_IDENTIFIER: ("\"" <IDENTIFIER> "\"" | "\'" <IDENTIFIER> "\'") >
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #SINGLE_CHAR: (["!"-"~"]) >
|
  < #DIGIT: ["0"-"9"] >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #LOWER_CASE_LETTER: ["_","a"-"z"] >
}

TOKEN : /* UNICODE */
{
  < UNICODE: ("U&" <CODEPOINT_LIST> | "u&" <CODEPOINT_LIST>) >
|
  < #CODEPOINT_LIST: ("\"" (<CODEPOINT>)+ "\"" | "\'" (<CODEPOINT>)+ "\'") >
|
  < #CODEPOINT: ("\\" <HEX><HEX><HEX><HEX> | "\\" <HEX><HEX><HEX><HEX><HEX><HEX>) >
|
  < #HEX: ["0"-"9","A"-"F","a"-"f"] >
}

/** Main production. */
ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Stmt()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stmt() : {}
{
    CopyStmt()
  | LOOKAHEAD(2)
    CopyStmt() ";"
}

/** Copy Statement. */
void CopyStmt()                : {/*@bgen(jjtree) CopyStatement */
  ASTCopyStatement jjtn000 = new ASTCopyStatement(JJTCOPYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CopyStatement */
  try {
/*@egen*/
  <K_COPY> qualifiedName() optColumnList() copyDirection() copyFileName() optWith() copyOptions()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** Qualified Name. Zero or more namespaces qualifiers can prefix the name. */
void qualifiedName()                : {/*@bgen(jjtree) QualifiedName */
  ASTQualifiedName jjtn000 = new ASTQualifiedName(JJTQUALIFIEDNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) QualifiedName */
  try {
/*@egen*/
  namespace()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void namespace()            : {/*@bgen(jjtree) Namespace */
  ASTNamespace jjtn000 = new ASTNamespace(JJTNAMESPACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Namespace */
    try {
/*@egen*/
    LOOKAHEAD(2)
    identifier() "." namespace()
  | LOOKAHEAD(2)
    quotedIdentifier() "." namespace()
  | identifier()
  | quotedIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** Optional Column List */
void optColumnList() : {}
{
  LOOKAHEAD(2)
  "(" columnList() ")"
  | {} /* EMPTY */
}

/** Column List. */
void columnList()             : {/*@bgen(jjtree) ColumnList */
  ASTColumnList jjtn000 = new ASTColumnList(JJTCOLUMNLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColumnList */
  try {
/*@egen*/
  LOOKAHEAD(2)
  columnElem() "," columnList()
  | columnElem()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** Column Element. */
void columnElem()                : {/*@bgen(jjtree) ColumnElement */
  ASTColumnElement jjtn000 = new ASTColumnElement(JJTCOLUMNELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColumnElement */
  try {
/*@egen*/
  identifier()
  | quotedIdentifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** Copy From */
void copyDirection()                : {/*@bgen(jjtree) CopyDirection */
  ASTCopyDirection jjtn000 = new ASTCopyDirection(JJTCOPYDIRECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CopyDirection */
  try {
/*@egen*/
  <K_FROM>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.setDirection("FROM"); }
  | <K_TO>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/	{ jjtn000.setDirection("TO"); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void copyFileName()           :
{/*@bgen(jjtree) Filename */
  ASTFilename jjtn000 = new ASTFilename(JJTFILENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Object o;
}
{/*@bgen(jjtree) Filename */
  try {
/*@egen*/
  <K_STDIN>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.setName("STDIN");}
  | <K_STDOUT>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.setName("STDOUT");}
  | identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** Optional With */
void optWith() : {}
{
  <K_WITH>
  | {} /* EMPTY */
}

/** Optional list of copy options */
void copyOptions()              : {/*@bgen(jjtree) CopyOptions */
  ASTCopyOptions jjtn000 = new ASTCopyOptions(JJTCOPYOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CopyOptions */
  try {
/*@egen*/
  LOOKAHEAD(3)
  "(" copyOptionGenericList() ")"
  | copyOptionList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void copyOptionGenericList()                 : {/*@bgen(jjtree) CopyOptionList */
  ASTCopyOptionList jjtn000 = new ASTCopyOptionList(JJTCOPYOPTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CopyOptionList */
  try {
/*@egen*/
  LOOKAHEAD(3)
  copyOptionElement() "," copyOptionGenericList()
  | copyOptionElement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void copyOptionList()                 : {/*@bgen(jjtree) CopyOptionList */
  ASTCopyOptionList jjtn000 = new ASTCopyOptionList(JJTCOPYOPTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CopyOptionList */
  try {
/*@egen*/
  copyOptionElement() copyOptionList()
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ /* EMPTY */
}

void copyOptionElement()                    : {/*@bgen(jjtree) CopyOptionElement */
  ASTCopyOptionElement jjtn000 = new ASTCopyOptionElement(JJTCOPYOPTIONELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CopyOptionElement */
    try {
/*@egen*/
    <O_FORMAT> formatType()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {
      jjtn000.setName("FORMAT");
    }
  | formatType()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {
      jjtn000.setName("FORMAT");
    }
  | <O_FREEZE>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
      jjtn000.setName("FREEZE");
      throw new ParseException("FREEZE is not supported.");
    }
  | <O_DELIMITER> singleChar()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {
      jjtn000.setName("DELIMITER");
    }
  | <O_NULL> quotedIdentifier()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {
      jjtn000.setName("NULL");
    }
  | <O_HEADER> booleanOption()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {
      jjtn000.setName("HEADER");
    }
  | <O_QUOTE> singleChar()/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {
      jjtn000.setName("QUOTE");
    }
  | <O_ESCAPE> singleChar()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {
      jjtn000.setName("ESCAPE");
    }
  | LOOKAHEAD(3)
    <O_FORCE_QUOTE> "(" columnList() ")"/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ {
      jjtn000.setName("FORCE_QUOTE");
      throw new ParseException("FORCE_QUOTE is not supported.");
    }
  | LOOKAHEAD(3)
    <O_FORCE_NOT_NULL> "(" columnList() ")"/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ {
      jjtn000.setName("FORCE_NOT_NULL");
      throw new ParseException("FORCE_NOT_NULL is not supported.");
    }
  | LOOKAHEAD(3)
    <O_FORCE_NULL> "(" columnList() ")"/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ {
      jjtn000.setName("FORCE_NULL");
      throw new ParseException("FORCE_NULL is not supported.");
    }
  | <O_ENCODING> identifier()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {
      jjtn000.setName("ENCODING");
      throw new ParseException("ENCODING is not supported.");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void formatType()             : {/*@bgen(jjtree) FormatType */
  ASTFormatType jjtn000 = new ASTFormatType(JJTFORMATTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FormatType */
    try {
/*@egen*/
    <O_TEXT>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
      jjtn000.setFormat("TEXT");
    }
  | <O_BINARY>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
      jjtn000.setFormat("BINARY");
    }
  | <O_CSV>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {
      jjtn000.setFormat("CSV");
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** An Identifier. */
void identifier()     :
{/*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    // Only support US_ASCII for now. UTF-8 support will be added later.
    ByteBuffer bytes = StandardCharsets.US_ASCII.encode(t.image.toLowerCase());
    jjtn000.setName(new String(bytes.array(), StandardCharsets.US_ASCII));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void quotedIdentifier()     :
{/*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ID */
    try {
/*@egen*/
    t=<UNICODE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      throw new ParseException("Escaped UNICODE is not supported.");
    }
  | t=<QUOTED_IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      // Only support US_ASCII for now. UTF-8 support will be added later.
      ByteBuffer bytes = StandardCharsets.US_ASCII.encode(t.image.substring(1, t.image.length()-1));
      jjtn000.setName(new String(bytes.array(), StandardCharsets.US_ASCII));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void singleChar()             :
{/*@bgen(jjtree) SingleChar */
  ASTSingleChar jjtn000 = new ASTSingleChar(JJTSINGLECHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) SingleChar */
  try {
/*@egen*/
  t=<QUOTED_CHAR>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setChar(t.image.charAt(1));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void booleanOption()          : {/*@bgen(jjtree) Boolean */
  ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean */
    try {
/*@egen*/
    <O_TRUE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.setBool(true); }
  | <O_FALSE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.setBool(false); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}