options {
  MULTI=true;
  VISITOR=true;
  NODE_DEFAULT_VOID=true;
  STATIC=false;
}

PARSER_BEGIN(Copy)

package com.google.cloud.spanner.pgadapter.parsers.copy;

public class Copy {

  public static void parse(String stmt, CopyTreeParser.CopyOptions options) throws Exception {
    java.io.InputStream stmtStream = new java.io.ByteArrayInputStream(stmt.getBytes());
    Copy tree = new Copy(stmtStream);
    try {
      ASTStart node = tree.Start();
      CopyVisitor v = new CopyTreeParser(options);
      node.jjtAccept(v, null);
    } catch (Exception e) {
      System.err.println(e.toString());
      throw e;
    }
  }

}

PARSER_END(Copy)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* KEYWORDS */
{
  <K_STDIN: ["s","S"]["t","T"]["d","D"]["i","I"]["n","N"]>
| <K_STDOUT: ["s","S"]["t","T"]["d","D"]["o","O"]["u","U"]["t","T"]>
| <K_TO: ["t","T"]["o","O"]>
| <K_FROM: ["f","F"]["r","R"]["o","O"]["m","M"]>
| <K_COPY: ["c","C"]["o","O"]["p","P"]["y","Y"]>
| <K_WITH: ["w","W"]["i","I"]["t","T"]["h","H"]>
}

TOKEN : /* SPECIAL CHARACTERS */
{
  <K_COMMA: ",">
| <K_DOT: ".">
| <K_QUOTE: "'">
| <K_DOUBLEQUOTE: "\"">
}

TOKEN : /* COPY OPTIONS */
{
  <O_BINARY: ["b","B"]["i","I"]["n","N"]["a","A"]["r","R"]["y","Y"]>
| <O_CSV: ["c","C"]["s","S"]["v","V"]>
| <O_TEXT: ["t","T"]["e","E"]["x","X"]["t","T"]>
| <O_FORMAT: ["f","F"]["o","O"]["r","R"]["m","M"]["a","A"]["t","T"]>
| <O_FREEZE: ["f","F"]["r","R"]["e","E"]["e","E"]["z","Z"]["e","E"]>
| <O_DELIMITER: ["d","D"]["e","E"]["l","L"]["i","I"]["m","M"]["i","I"]["t","T"]["e","E"]["r","R"]>
| <O_NULL: ["n","N"]["u","U"]["l","L"]["l","L"]>
| <O_HEADER: ["h","H"]["e","E"]["a","A"]["d","D"]["e","E"]["r","R"]>
| <O_QUOTE: ["q","Q"]["u","U"]["o","O"]["t","T"]["e","E"]>
| <O_ESCAPE: ["e","E"]["s","S"]["c","C"]["a","A"]["p","P"]["e","E"]>
| <O_FORCE_QUOTE: ["f","F"]["o","O"]["r","R"]["c","C"]["e","E"]["_"]["q","Q"]["u","U"]["o","O"]["t","T"]["e","E"]>
| <O_FORCE_NOT_NULL: ["f","F"]["o","O"]["r","R"]["c","C"]["e","E"]["_"]["n","N"]["o","O"]["t","T"]["_"]["n","N"]["u","U"]["l","L"]["l","L"]>
| <O_FORCE_NULL: ["f","F"]["o","O"]["r","R"]["c","C"]["e","E"]["_"]["n","N"]["u","U"]["l","L"]["l","L"]>
| <O_ENCODING: ["e","E"]["n","N"]["c","C"]["o","O"]["d","D"]["i","I"]["n","N"]["g","G"]>
| <O_TRUE: ("TRUE" | "true")>
| <O_FALSE: ("FALSE" | "false")>
}

TOKEN : /* IDENTIFIERS */
{
  < QUOTED_IDENTIFIER: ("\"" <IDENTIFIER> "\"" | "\'" <IDENTIFIER> "\'") >
|
  < IDENTIFIER: ("'" <ID> "'" | <ID>) >
|
  < QUOTED_CHAR: ("\"" <SINGLE_CHAR> "\"" | "\'" <SINGLE_CHAR> "\'") >
|
  < #SINGLE_CHAR: (["!"-"'","*"-"/",":","<"-"@","["-"`"]) >
|
  < #ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #DIGIT: ["0"-"9"] >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #LOWER_CASE_LETTER: ["_","a"-"z"] >
}

/** Main production. */
ASTStart Start() #Start : {}
{
  Expression() ";"
  { return jjtThis; }
}

/** An Expression. */
void Expression() : {}
{
  CopyStmt()
}

/** Copy Statement. */
void CopyStmt() #CopyStatement : {}
{
  <K_COPY> qualifiedName() optColumnList() copyFrom() copyFileName() optWith() copyOptions()
}

/** Qualified Name. */
void qualifiedName() #QualifiedName : {}
{
  LOOKAHEAD(3)
  namespace() <K_DOT> identifier()
  | LOOKAHEAD(3)
    namespace() <K_DOT> quotedIdentifier()
  | identifier()
  | quotedIdentifier()
}

void namespace() : {}
{
  identifier()
  | quotedIdentifier()
}

/** Optional Column List */
void optColumnList() : {}
{
  LOOKAHEAD(2)
  "(" columnList() ")"
  | {} /* EMPTY */
}

/** Column List. */
void columnList() #ColumnList : {}
{
  LOOKAHEAD(2)
  columnElem() <K_COMMA> columnList()
  | columnElem()
}

/** Column Element. */
void columnElem() #ColumnElement : {}
{
  identifier()
  | quotedIdentifier()
}

/** Copy From */
void copyFrom() #CopyDirection : {}
{
  <K_FROM> { jjtThis.setDirection("FROM"); }
  | <K_TO>	{
    jjtThis.setDirection("TO");
    throw new ParseException("COPY TO is not supported.");
  }
}

void copyFileName() #Filename :
{
  Object o;
}
{
  <K_STDIN> {jjtThis.setName("STDIN");}
  | <K_STDOUT> {jjtThis.setName("STDOUT");}
  | identifier()
}

/** Optional With */
void optWith() : {}
{
  <K_WITH>
  | {} /* EMPTY */
}

/** Optional list of copy options */
void copyOptions() #CopyOptions : {}
{
  LOOKAHEAD(2)
  "(" copyOptionList() ")"
  | copyOptionList()
}

void copyOptionList() #CopyOptionList : {}
{
  copyOptionElement() copyOptionList()
  | {} /* EMPTY */
}

void copyOptionElement() #CopyOptionElement : {}
{
    <O_FORMAT> formatType() {
      jjtThis.setName("FORMAT");
    }
  | formatType() {
      jjtThis.setName("FORMAT");
  }
  | <O_FREEZE> {
      jjtThis.setName("FREEZE");
      throw new ParseException("FREEZE is not supported.");
    }
  | <O_DELIMITER> singleChar() {
      jjtThis.setName("DELIMITER");
    }
  | <O_NULL> quotedIdentifier() {
      jjtThis.setName("NULL");
    }
  | <O_HEADER> booleanOption() {
      jjtThis.setName("HEADER");
    }
  | <O_QUOTE> singleChar() {
      jjtThis.setName("QUOTE");
    }
  | <O_ESCAPE> singleChar() {
      jjtThis.setName("ESCAPE");
    }
  | LOOKAHEAD(3)
    <O_FORCE_QUOTE> "(" columnList() ")" {
      jjtThis.setName("FORCE_QUOTE");
      throw new ParseException("FORCE_QUOTE is not supported.");
    }
  | LOOKAHEAD(3)
    <O_FORCE_NOT_NULL> "(" columnList() ")" {
      jjtThis.setName("FORCE_NOT_NULL");
      throw new ParseException("FORCE_NOT_NULL is not supported.");
    }
  | LOOKAHEAD(3)
    <O_FORCE_NULL> "(" columnList() ")" {
      jjtThis.setName("FORCE_NULL");
      throw new ParseException("FORCE_NULL is not supported.");
    }
  | <O_ENCODING> identifier() {
      jjtThis.setName("ENCODING");
      throw new ParseException("ENCODING is not supported.");
    }
}

void formatType() #FormatType : {}
{
    <O_TEXT> {
      jjtThis.setFormat("TEXT");
    }
  | <O_BINARY> {
      jjtThis.setFormat("BINARY");
    }
  | <O_CSV> {
      jjtThis.setFormat("CSV");
    }
}

/** An Identifier. */
void identifier() #ID :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}

void quotedIdentifier() #ID :
{
  Token t;
}
{
  t=<QUOTED_IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}

void singleChar() #SingleChar :
{
  Token t;
}
{
  t=<QUOTED_CHAR>
  {
    jjtThis.setChar(t.image.charAt(1));
  }
}

void booleanOption() #Boolean : {}
{
    <O_TRUE> { jjtThis.setBool(true); }
  | <O_FALSE> { jjtThis.setBool(false); }
}
