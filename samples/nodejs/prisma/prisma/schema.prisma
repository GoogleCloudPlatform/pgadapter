generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Singer {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  firstName String
  lastName  String
  /// `fullName` is generated by the database and should not be set.
  fullName  String?
  active    Boolean
  albums    Album[]
  Concert   Concert[]

  @@index(lastName)
}

model Album {
  id              String    @id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  title           String
  marketingBudget Decimal?
  releaseDate     DateTime? @db.Date
  coverPicture    Bytes?
  singer          Singer    @relation(fields: [singerId], references: [id])
  singerId        String
  tracks          Track[]

  @@unique([singerId, title])
}

model Track {
  id          String
  trackNumber BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  sampleRate  Float?
  album       Album    @relation(fields: [id], references: [id])

  @@id([id, trackNumber])
  @@unique([id, title])
}

model Venue {
  id          String    @id
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description Json
  Concert     Concert[]
}

model Concert {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  venue     Venue    @relation(fields: [venueId], references: [id])
  venueId   String
  singer    Singer   @relation(fields: [singerId], references: [id])
  singerId  String
  startTime DateTime @db.Timestamptz
  endTime   DateTime @db.Timestamptz

  @@index([startTime(sort: Desc)])
}
