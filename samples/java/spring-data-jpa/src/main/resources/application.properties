
# Defining these properties here makes it a bit easier to build the connection string.
spanner.project=appdev-soda-spanner-staging
spanner.instance=knut-test-ycsb
spanner.database=spring-boot-hibernate-jpa
# This setting ensures that PGAdapter automatically commits the current transaction if it encounters
# a DDL statement in a read/write transaction, and then executes the DDL statements as a single DDL
# batch. 
spanner.ddl_transaction_mode=options=-c%20spanner.ddl_transaction_mode=AutocommitExplicitTransaction

# This is the connection string to PGAdapter running in-process.
# We use a fully qualified database name, so we can start PGAdapter without a fixed project or instance.
# The 'options=-c%20spanner.ddl_transaction_mode=AutocommitExplicitTransaction' addition at the end
# of the connection URL instructs PGAdapter to commit the current transaction if it encounters a DDL
# statement in a transaction. All following DDL statements will then be executed as a DDL batch.
# This is needed to support Liquibase, as Liquibase will use DDL transactions when it is connected
# to PostgreSQL.
spring.datasource.url=jdbc:postgresql://localhost:9432/projects%2F${spanner.project}%2Finstances%2F${spanner.instance}%2Fdatabases%2F${spanner.database}?${spanner.ddl_transaction_mode}

# This sample uses Liquibase for schema management. It is highly recommended to use a higher level
# schema management tool like Liquibase, instead of letting Hibernate generate the schema.
# Instead, just let Hibernate validate the schema that is created by Liquibase (or similar).
# This also allows you to use Spanner-specific features like interleaved tables.
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Enable JDBC batching. This will improve the performance of the application, as most inserts and
# updates will be sent in batches instead of individual statements to Cloud Spanner.
spring.jpa.properties.hibernate.jdbc.batch_size=50
# order_inserts=true will order the inserts by entity type. This enables Hibernate to batch more
# statements.
spring.jpa.properties.hibernate.order_inserts=true
